{
    "collab_server" : "",
    "contents" : "CI <- setClass(\n  # Set the name for the class\n  Class = \"CI\",\n  \n  # Define the slots\n  slots = c(superReplicationCount = \"numeric\",\n            replicationCount      = \"numeric\",\n            sampleSize            = \"numeric\",\n            alpha = \"numeric\",\n            x     = \"array\",\n            upper = \"numeric\",\n            lower = \"numeric\",\n            arraysToSave  = \"array\",\n            pathsAndNames = \"list\"),\n  # Set the default values for the slots. (optional)\n  prototype = list (superReplicationCount = 10,\n                    replicationCount      = 10,\n                    sampleSize            = 10,\n                    alpha = 0.05,\n                    x     = array(0, dim = c(0, 0, 0)), \n                    upper =    0,\n                    lower =    0,\n                    arraysToSave = array(0, dim = c(rep(1, 10))),\n                    pathsAndNames = list()),\n\n  # Make a function that can test to see if the data is consistent.\n  validity = function(object)  {\n    if(object@superReplicationCount < 2 | object@replicationCount < 2 | \n       object@sampleSize < 2 | object@alpha < 0 | object@alpha > 1) {\n        return(\"Some of parameter(s) are out of bounds.\")\n    }\n    return(TRUE)\n  }\n)\n\n# superReplicationCount ---------------------------------------------------\n\n\n# create a method to assign and get the super replication count (superReplicationCount)\nsetGeneric(name <- \"setSuperReplicationCount\", \n           def <- function(object, superReplicationCount) { \n             standardGeneric(\"setSuperReplicationCount\") \n             } \n           )\n\nsetMethod(f <- \"setSuperReplicationCount\",\n          signature <- \"CI\",\n          definition <- function(object, superReplicationCount) {\n            object@superReplicationCount <- superReplicationCount\n            validObject(object)\n            return(object)\n            }\n          )\n\nsetGeneric(name <- \"getSuperReplicationCount\", \n           def <- function(object) { \n             standardGeneric(\"getSuperReplicationCount\") \n             } \n           )\n\nsetMethod(f <- \"getSuperReplicationCount\",\n          signature <- \"CI\",\n          definition <- function(object) {\n            return(object@superReplicationCount)\n            }\n          )\n\n# create a method to set and get the value of the replication count (replicationCount)\nsetGeneric(name=\"setReplicationCount\",\n           def <- function(object, replicationCount) { \n             standardGeneric(\"setReplicationCount\") \n             } \n           )\n\n\n# replicationCount --------------------------------------------------------\n\n\nsetMethod(f <- \"setReplicationCount\",\n          signature <- \"CI\",\n          definition <- function(object, replicationCount) {\n            object@replicationCount <- replicationCount\n            validObject(object)\n            return(object)\n            }\n          )\n\nsetGeneric(name=\"getReplicationCount\",\n           def <- function(object) { \n             standardGeneric(\"getReplicationCount\") \n           } \n)\n\nsetMethod(f <- \"getReplicationCount\",\n          signature <- \"CI\",\n          definition <- function(object) {\n            return(object@replicationCount)\n          }\n)\n\n\n# sampleSize --------------------------------------------------------------\n\n\n# create a method to assign and get the value of the sample size (sampleSize)\nsetGeneric(name=\"setSampleSize\",\n           def <- function(object, sampleSize) { \n             standardGeneric(\"setSampleSize\") \n             } \n           )\n\nsetMethod(f <- \"setSampleSize\",\n          signature <- \"CI\",\n          definition <- function(object, sampleSize) {\n            object@sampleSize <- sampleSize\n            validObject(object)\n            return(object)\n            }\n          )\n\nsetGeneric(name=\"getSampleSize\",\n           def <- function(object) { \n             standardGeneric(\"getSampleSize\") \n             } \n           )\n\nsetMethod(f <- \"getSampleSize\",\n          signature <- \"CI\",\n          definition <- function(object) {\n            return(object@sampleSize)\n            }\n          )\n\n\n# alpha -------------------------------------------------------------------\n\n\n# create a method to assign and get the super replication count (superReplicationCount)\nsetGeneric(name <- \"setAlpha\", \n           def <- function(object, alpha) { \n             standardGeneric(\"setAlpha\") \n             } \n           )\n\nsetMethod(f <- \"setAlpha\",\n          signature <- \"CI\",\n          definition <- function(object, alpha) {\n            object@alpha <- alpha\n            validObject(object)\n            return(object)\n          }\n)\n\nsetGeneric(name <- \"getAlpha\", \n           def <- function(object) { \n             standardGeneric(\"getAlpha\") \n             } \n           )\n\nsetMethod(f <- \"getAlpha\",\n          signature <- \"CI\",\n          definition <- function(object) {\n            return(object@alpha)\n            }\n          )\n\n\n# createX -----------------------------------------------------------------------\n\n\n# create a method to assign and get the x (x)\nsetGeneric(name <- \"createX\",\n           def <- function(object) {\n             standardGeneric(\"createX\")\n             }\n           )\n\nsetMethod(f <- \"createX\",\n          signature <- \"CI\",\n          definition <- function(object) {\n            }\n          )\n\nsetGeneric(name <- \"getX\",\n           def <- function(object) {\n             standardGeneric(\"getX\")\n             }\n           )\n\nsetMethod(f <- \"getX\",\n          signature <- \"CI\",\n          definition <- function(object) {\n            return(object@x)\n          }\n)\n\n\n# lowerBound --------------------------------------------------------------\n\n\n# create a method to assign and get the lower confint\nsetGeneric(name <- \"setLower\", \n           def <- function(object, lower) { \n             standardGeneric(\"setLower\") \n             } \n           )\n\nsetMethod(f <- \"setLower\",\n          signature <- \"CI\",\n          definition <- function(object, lower) {\n            object@lower <- lower\n            validObject(object)\n            return(object)\n            }\n          )\n\nsetGeneric(name <- \"getLower\", \n           def <- function(object) { \n             standardGeneric(\"getLower\") \n             } \n           )\n\nsetMethod(f <- \"getLower\",\n          signature <- \"CI\",\n          definition <- function(object) {\n            return(object@lower)\n            }\n          )\n\n\n# upperBound --------------------------------------------------------------\n\n\n# create a method to assign and get the super replication count (superReplicationCount)\nsetGeneric(name <- \"setUpper\", \n           def <- function(object, upper) { \n             standardGeneric(\"setUpper\") \n           } \n)\n\nsetMethod(f <- \"setUpper\",\n          signature <- \"CI\",\n          definition <- function(object, upper) {\n            object@upper <- upper\n            validObject(object)\n            return(object)\n          }\n)\n\nsetGeneric(name <- \"getUpper\", \n           def <- function(object) { \n             standardGeneric(\"getUpper\") \n           } \n)\n\nsetMethod(f <- \"getUpper\",\n          signature <- \"CI\",\n          definition <- function(object) {\n            return(object@superReplicationCount)\n          }\n)\n\n\n# arraysToSave ------------------------------------------------------------\n\nsetGeneric(name <- \"createArraysToSave\", \n           def <- function(object, arraysToSave) { \n             standardGeneric(\"createArraysToSave\") \n           } \n)\n\nsetMethod(f <- \"createArraysToSave\",\n          signature <- \"CI\",\n          definition <- function(object, arraysToSave) {\n            return(object)\n            }\n)\n\nsetGeneric(name <- \"getArraysToSave\", \n           def <- function(object) { \n             standardGeneric(\"getArraysToSave\") \n           } \n)\n\nsetMethod(f <- \"getArraysToSave\",\n          signature <- \"CI\",\n          definition <- function(object) {\n            return(getArraysToSave(object))\n          }\n)\n\n# pathsAndNames  --------------------------------------------------------------------\n\nsetGeneric(name <- \"createPathsAndNames\",\n           def  <- function(object) {\n             standardGeneric(\"createPathsAndNames\")\n           } \n)\n\n\nsetMethod(f <- \"createPathsAndNames\",\n          signature <- signature(\"CI\"),\n          definition <- function(object) {\n            return(object)\n            }\n)\n\n\nsetGeneric(name <- \"getPathsAndNames\", \n           def <- function(object) { \n             standardGeneric(\"getPathsAndNames\") \n           } \n)\n\nsetMethod(f <- \"getPathsAndNames\",\n          signature <- \"CI\",\n          definition <- function(object) {\n            return(getPathsAndNames(object))\n          }\n)\n\n# saveAll --------------------------------------------------------------------\n\n# Building confidence intervals as a method\nsetGeneric(name <- \"saveAll\",\n           def  <- function(object, \n                            is_csv_output, \n                            is_confint_image, \n                            is_cre_image) {\n             standardGeneric(\"saveAll\")\n             } \n           )\n\nsetMethod(f <- \"saveAll\",\n          signature <- signature(\"CI\", \n                                 \"logical\", \n                                 \"logical\", \n                                 \"logical\"),\n          definition <- function(object, \n                                 is_csv_output, \n                                 is_confint_image,\n                                 is_cre_image) {\n            \n            if (is_csv_output == T) { \n              \n              \n            }\n            \n            if (is_confint_image == T) { \n              \n            }\n            \n            if (is_cre_image == T) { \n              \n              }\n            }\n          )\n\n\n# saveCSV ----------------------------------------------------------------\n\nsetGeneric(name <- \"saveCSV\",\n           def  <- function(object) {\n             standardGeneric(\"saveCSV\")\n           } \n)\n\nsetMethod(f <- \"saveCSV\",\n          signature <- signature(\"CI\"),\n          definition <- function(object) {\n            dir.create(file.path(\"./\", \"csv_output\"), showWarnings = FALSE)\n            write.csv(x = getArraysToSave(object), \n                      file = as.character(getPathsAndNames(object)[1]))\n          }\n)\n\n\n# saveImageCI -------------------------------------------------------------\n\nsetGeneric(name <- \"saveImageCI\",\n           def  <- function(object) {\n             standardGeneric(\"saveImageCI\")\n           } \n)\n\nsetMethod(f <- \"saveImageCI\",\n          signature <- signature(\"CI\"),\n          definition <- function(object) {\n            \n          }\n)\n\n\n# saveImageCRE -------------------------------------------------------------\n\nsetGeneric(name <- \"saveImageCRE\",\n           def  <- function(object) {\n             standardGeneric(\"saveImageCRE\")\n           } \n)\n\nsetMethod(f <- \"saveImageCRE\",\n          signature <- signature(\"CI\"),\n          definition <- function(object) {\n            \n          }\n)\n\n",
    "created" : 1506896228567.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2960946329",
    "id" : "E15884DC",
    "lastKnownWriteTime" : 1492182108,
    "last_content_update" : 1492182108,
    "path" : "C:/Dropbox/Github/ConfidenceBandsEnchanced/R/CI.R",
    "project_path" : "R/CI.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}